package com.example.app.controller;import com.example.app.domain.Message;import com.example.app.domain.Role;import com.example.app.domain.User;import com.example.app.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.data.web.PageableDefault;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.security.core.annotation.AuthenticationPrincipal;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import java.util.LinkedList;import java.util.List;import java.util.Map;@Controller@RequestMapping("/user")public class UserController {    @Autowired    private UserService userService;    @PreAuthorize("hasAuthority('ADMIN')")    @GetMapping    public String userList(            @PageableDefault(sort = {"id"}, direction = Sort.Direction.DESC) Pageable pageable,            Model model) {        Page page = userService.findPaginatorAll(pageable);        model.addAttribute("page", page);        model.addAttribute("url", "/user");        return "userList";    }    @PreAuthorize("hasAuthority('ADMIN')")    @GetMapping("{user}")    public String userEditForm(@PathVariable User user, Model model) {        model.addAttribute("user", user);        model.addAttribute("roles", Role.values());        return "userEdit";    }    @PreAuthorize("hasAuthority('ADMIN')")    @PostMapping    public String userSave(            @RequestParam Map<String, String> form,            @RequestParam String username,            @RequestParam("userId") User user    ) {        userService.saveUser(user, username, form);        return "redirect:/user";    }    @GetMapping("/profile")    public String getProfile(Model model, @AuthenticationPrincipal User user) {        model.addAttribute("username", user.getUsername());        model.addAttribute("email", user.getEmail());        return "profile";    }    @PostMapping("/profile")    public String updateProfile(            @AuthenticationPrincipal User user,            @RequestParam String password,            @RequestParam String password2,            @RequestParam String email,            Model model    ) {        if (password != null && password2 != null && !password.equals(password2)) {            model.addAttribute("passwordError", "Passwords are different");            model.addAttribute("email", user.getEmail());            model.addAttribute("username", user.getUsername());            return "profile";        }        if (!userService.updateProfile(user, password, password2, email)) {            model.addAttribute("email", user.getEmail());            model.addAttribute("username", user.getUsername());            return "profile";        }        model.addAttribute("message", "Changes have been saved!");        model.addAttribute("email", user.getEmail());        return "profile";    }    @GetMapping("subscribe/{user}")    public String subscribe(            @AuthenticationPrincipal User currentUser,            @PathVariable User user    ) {        userService.subscribe(currentUser, user);        return "redirect:/user-messages/" + user.getId();    }    @GetMapping("unsubscribe/{user}")    public String unsubscribe(            @AuthenticationPrincipal User currentUser,            @PathVariable User user    ) {        userService.unsubscribe(currentUser, user);        return "redirect:/user-messages/" + user.getId();    }    @GetMapping("{type}/{user}/list")    public String subList(            @PageableDefault(sort = {"id"}, direction = Sort.Direction.DESC) Pageable pageable,            @PathVariable String type,            @PathVariable User user,            Model model    ){        model.addAttribute("userChannel", user);        model.addAttribute("type", type);        Page page = null;        List<User> users = new LinkedList<>();        if("subscriptions".equals(type)){            users.addAll(user.getSubscriptions());            page = userService.getPaginator(users, pageable);            model.addAttribute("page", page);        } else{            users.addAll(user.getSubscribers());            page = userService.getPaginator(users, pageable);            model.addAttribute("page", page);        }        model.addAttribute("url", "/user/"+type+"/"+user.getId()+"/list");        return "subscriptions";    }    @GetMapping("/search")    public String search(            @RequestParam ("searchText") String username,            @PageableDefault(sort = {"id"}, direction = Sort.Direction.DESC) Pageable pageable,            Model model    ) {        Page page =  userService.getPaginatorByUsername(username, pageable);        model.addAttribute("page", page);        model.addAttribute("url", "/search");        model.addAttribute("searchText", username);        return "search";    }}