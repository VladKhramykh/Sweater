package com.example.app.controller;import com.example.app.Repositories.MessageRepo;import com.example.app.Repositories.UserRepo;import com.example.app.Repositories.UserRepository;import com.example.app.domain.Message;import com.example.app.domain.User;import com.example.app.domain.dto.MessageDto;import com.example.app.service.MessageService;import com.example.app.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.data.web.PageableDefault;import org.springframework.security.core.annotation.AuthenticationPrincipal;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.util.StringUtils;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import org.springframework.web.util.UriComponents;import org.springframework.web.util.UriComponentsBuilder;import javax.validation.Valid;import java.io.File;import java.io.IOException;import java.math.BigInteger;import java.util.*;@Controllerclass MainController {    //    @Autowired//    MessageRepository messageRepository;    @Autowired    UserRepository userRepository;    private MessageRepo messageRepo = new MessageRepo();    UserRepo userRepo = new UserRepo();    private MessageService messageService = new MessageService();    @Autowired    UserService userService;    @Value("${upload.path}")    private String uploadPath;    @GetMapping("/")    public String greeting(Map<String,Object> model) {        return "greeting";    }    @GetMapping("/main")    public String main(            @RequestParam(required = false, defaultValue = "") String tag,            @AuthenticationPrincipal User currentUser,            @PageableDefault(sort = {"id"}, direction = Sort.Direction.DESC) Pageable pageable,            Model model){        Page<Message> page = messageService.findPaginatorBySubsAndTag(currentUser, tag, pageable);        model.addAttribute("url", "/main");        model.addAttribute("page", page);        model.addAttribute("tag", tag);        return "main";    }    @GetMapping("/all-main")    public String all(            @RequestParam(required = false, defaultValue = "") String tag,            @AuthenticationPrincipal User currentUser,            @PageableDefault(sort = {"id"}, direction = Sort.Direction.DESC) Pageable pageable,            Model model){//        Page<Message> page = messageService.findPaginatorByTag(tag, pageable);//        Page<Message> page = messageService.getPaginator(messageRepo.getByTag(tag), pageable);        Page<MessageDto> page = messageService.getPaginatorDto(messageRepo.getAllMessagesDto(currentUser), pageable);        model.addAttribute("page", page);        model.addAttribute("url", "/all-main");        model.addAttribute("tag", tag);        return "all-main";    }    @PostMapping("/main")    public String add(            @AuthenticationPrincipal User currentUser,            @Valid Message message,            BindingResult bindingResult,            @PageableDefault(sort = {"id"}, direction = Sort.Direction.DESC) Pageable pageable,            Model model,            @RequestParam("file") MultipartFile file    ) throws IOException {        message.setAuthor(currentUser);        if(bindingResult.hasErrors()){            Map<String, String> errorsMap = ControllerUtils.getValidationErrors(bindingResult);            model.mergeAttributes(errorsMap);            model.addAttribute("message", message);        } else{            saveFile(message, file);            model.addAttribute("message", null);            messageRepo.addMessage(message);//            messageRepository.save(message);        }//        Iterable<Message> messages = messageRepository.findAll();//        Page<Message> page = messageService.getPaginator(messageRepo.getAll(), pageable);//        Page<Message> page = messageService.findPaginatorAll(messageRepo.getAll(), pageable);        Page<MessageDto> page = messageService.getPaginatorDto(messageRepo.getAllMessagesDto(currentUser), pageable);        model.addAttribute("url", "/main");        model.addAttribute("page", page);        return "main";    }    private void saveFile(@Valid Message message, @RequestParam("file") MultipartFile file) throws IOException {        if (file != null && !file.getOriginalFilename().isEmpty()) {            File uploadDir = new File(uploadPath);            if (!uploadDir.exists()) {                uploadDir.mkdir();            }            String uuidFile = UUID.randomUUID().toString();            String resultFilename = uuidFile + "." + file.getOriginalFilename();            file.transferTo(new File(uploadPath + "/" + resultFilename));            message.setFilename(resultFilename);        }    }    @GetMapping("/user-messages/{user}")    public String userMessages(            @AuthenticationPrincipal User currentUser,            @PathVariable User user,            @RequestParam(required = false) Message message,            @PageableDefault(sort = {"id"}, direction = Sort.Direction.DESC) Pageable pageable,            Model model    ){//        Page<Message> page = messageService.getPaginatorByUser(user, pageable);        Page<Message> page = messageService.getPaginator(messageRepo.getMessagesByUser(user), pageable);//        Page<Message> page = messageService.messageListForUser(pageable, user);        model.addAttribute("subscriptionsCount", user.getSubscriptions().size());        model.addAttribute("subscribersCount", user.getSubscribers().size());        model.addAttribute("page", page);        model.addAttribute("message", message);        model.addAttribute("isSubscriber", user.getSubscribers().contains(currentUser));        model.addAttribute("isCurrentUser", currentUser.equals(user));        model.addAttribute("userChannel", user);        model.addAttribute("url", "/user-messages/"+user.getId());        return "userMessages";    }    @PostMapping("/user-messages/{user}")    public String updateMessage(            @AuthenticationPrincipal User currentUser,            @PathVariable Long user,            @RequestParam("id") Message message,            @RequestParam("text") String text,            @RequestParam("tag") String tag,            @RequestParam("file") MultipartFile file    ) throws IOException {        if(message.getAuthor().equals(currentUser)){            if(!StringUtils.isEmpty(text)){                message.setText(text);            }            if(!StringUtils.isEmpty(tag)){                message.setTag(tag);            }            saveFile(message,file);//            messageRepository.save(message);            messageRepo.update(message);        }        return "redirect:/user-messages/" + user;    }    @GetMapping("/messages/{message}/like")    public String like(            @AuthenticationPrincipal User user,            @PathVariable Message message,            RedirectAttributes redirectAttributes,            @RequestHeader String referer    ) {        messageRepo.like(user, message);        UriComponents components = UriComponentsBuilder.fromHttpUrl(referer).build();        components.getQueryParams()                .entrySet()                .forEach(pair -> redirectAttributes.addAttribute(pair.getKey(), pair.getValue()));        return "redirect:"+components.getPath();    }    @GetMapping("/messages/{message}/dislike")    public String dislike(            @AuthenticationPrincipal User user,            @PathVariable Message message,            RedirectAttributes redirectAttributes,            @RequestHeader String referer    ) {        messageRepo.dislike(user, message);        UriComponents components = UriComponentsBuilder.fromHttpUrl(referer).build();        components.getQueryParams()                .entrySet()                .forEach(pair -> redirectAttributes.addAttribute(pair.getKey(), pair.getValue()));        return "redirect:"+components.getPath();    }}