package com.example.app.service;import com.example.app.Repositories.SubRepo;import com.example.app.Repositories.UserRepo;import com.example.app.Repositories.UserRepository;import com.example.app.domain.Message;import com.example.app.domain.Role;import com.example.app.domain.User;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageImpl;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import org.springframework.util.StringUtils;import java.util.*;import java.util.stream.Collectors;@Servicepublic class UserService implements UserDetailsService {    @Autowired    private UserRepository userRepository;    private UserRepo userRepo = new UserRepo();    private SubRepo subRepo = new SubRepo();    @Autowired    private MailSender mailSender;    @Autowired    private PasswordEncoder passwordEncoder;    public UserService(UserRepository userRepository) {        this.userRepository = userRepository;    }    @Override    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {        User user = userRepository.findByUsername(username);//        User user = userRepo.findUserByUsername(username);        if(user == null){            throw new UsernameNotFoundException("User not found");        }        return user;    }    public boolean addUser(User user) {//        User userFromDb = userRepository.findByUsername(user.getUsername());//        if (userFromDb != null) {//            return false;//        }        user.setActive(true);//        user.setRoles(Collections.singleton(Role.USER));        user.setRoles(Role.USER.toString());        user.setActivationCode(UUID.randomUUID().toString());        user.setPassword(passwordEncoder.encode(user.getPassword()));//        userRepository.save(user);        if(!userRepo.addUser(user)) {            return false;        }        new Thread(new Runnable() {            @Override            public void run() {                sendActivationCode(user);            }        }).start();        return true;    }    private void sendActivationCode(User user) {        if (!StringUtils.isEmpty(user.getEmail())) {            String message = String.format(                    "Hello, %s \n" +                            "Welcome to Sweater. Please, visit next link: http://localhost:8090/activate/%s",                    user.getUsername(),                    user.getActivationCode()            );            mailSender.send(user.getEmail(), "Activation Code", message);        }    }    public boolean activateUser(String code) {//        User user = userRepository.findByActivationCode(code);        User user = userRepo.getUserByActivationCode(code);        if (user == null) {            return false;        }        user.setActivationCode(null);//        userRepository.save(user);        userRepo.activateUser(user);        return true;    }    public List<User> findAll() {//        return userRepository.findAll();        return userRepo.getAll();    }    public void saveUser(User user, String username, Map<String, String> form) {        user.setUsername(username);        Set<String> roles = Arrays.stream(Role.values()).map(Role::name).collect(Collectors.toSet());        user.getRoles().clear();        for (String key : form.keySet()) {            if(roles.contains(key)){                user.getRoles().add(Role.valueOf(key));            }        }    }    public boolean updateProfile(User user, String password, String password2, String email) {        String userEmail = user.getEmail();        boolean isEmailChanged = (email != null && !email.equals(userEmail)) ||                (userEmail != null && !userEmail.equals(email));        if(isEmailChanged){            user.setEmail(email);            if(!StringUtils.isEmpty(email)){                user.setActivationCode(UUID.randomUUID().toString());            }        }        if(!StringUtils.isEmpty(password) || !StringUtils.isEmpty(password2)){            if(password.equals(password2)){                user.setPassword(passwordEncoder.encode(password));            } else{                return false;            }        }//        userRepository.save(user);        userRepo.updateUser(user);        if(isEmailChanged){            sendActivationCode(user);        }        return true;    }    public void subscribe(User currentUser, User user) {        user.getSubscribers().add(currentUser);//        userRepository.save(user);        subRepo.subscribe(user, currentUser);    }    public void unsubscribe(User currentUser, User user) {        user.getSubscribers().remove(currentUser);//        userRepository.save(user);        subRepo.unsubscribe(user, currentUser);    }    public Page<User> findPaginatorAll(Pageable pageable){        int pageSize = pageable.getPageSize();        int currentPage = pageable.getPageNumber();        int startItem = currentPage * pageSize;        List<User> list = userRepo.getAll();        int size = list.size();        if(list.size() < startItem){            list = Collections.emptyList();        } else {            int toIndex = Math.min(startItem + pageSize, list.size());            list = list.subList(startItem, toIndex);        }        Page<User> userPage = new PageImpl<User>(list, PageRequest.of(currentPage, pageSize), size);        return userPage;    }    public Page<User> getPaginatorByUsername(String username, Pageable pageable) {        int pageSize = pageable.getPageSize();        int currentPage = pageable.getPageNumber();        int startItem = currentPage * pageSize;        List<User> users = userRepo.getSimilarUsersByUsername(username);        int size = users.size();        if(size < startItem) {            users = Collections.emptyList();        } else {            int toIndex = Math.min(startItem + pageSize, size);            users = users.subList(startItem, toIndex);        }        Page<User> usersPage = new PageImpl<User>(users, PageRequest.of(currentPage, pageSize), size);        return usersPage;    }    public Page<User> getPaginator(List<User> users, Pageable pageable) {        int pageSize = pageable.getPageSize();        int currentPage = pageable.getPageNumber();        int startItem = currentPage * pageSize;        if(users.size() < startItem) {            users = Collections.emptyList();        } else {            int toIndex = Math.min(startItem + pageSize, users.size());            users = users.subList(startItem, toIndex);        }        int size = users.size();        Page<User> usersPage = new PageImpl<User>(users, PageRequest.of(currentPage, pageSize), size);        return usersPage;    }}