package com.example.app.Repositories;import com.example.app.Repositories.dao.UserDao;import com.example.app.config.HibernateUtil;import com.example.app.domain.Role;import com.example.app.domain.User;import org.hibernate.Session;import org.hibernate.SessionFactory;import org.hibernate.Transaction;import org.hibernate.query.Query;import org.hibernate.transform.Transformers;import javax.persistence.*;import java.math.BigInteger;import java.util.HashSet;import java.util.List;import java.util.Set;public class UserRepo implements UserDao {    private static SessionFactory sessionFactory;    static {        sessionFactory = HibernateUtil.getSessionFactory();    }    @Override    public boolean addUser(User user) {        Session session = null;        Transaction transaction = null;        List messages = null;        try{            session = sessionFactory.openSession();            transaction = session.beginTransaction();            Query query = session.createSQLQuery("CALL AddUser(:activation_code, :active, :email, :password, :username)")                    .addEntity(User.class)                    .setParameter("activation_code", user.getActivationCode())                    .setParameter("active", user.isActive())                    .setParameter("email", user.getEmail())                    .setParameter("password", user.getPassword())                    .setParameter("username", user.getUsername());            query.executeUpdate();        } catch (Exception e){            if(transaction != null);                transaction.commit();            return false;        } finally {            session.close();        }        return true;    }    @Override    public User findUserByUsername(String username) {        Session session = null;        Transaction transaction = null;        User user = null;        try{            session = sessionFactory.openSession();            transaction = session.beginTransaction();            Query query = session.createSQLQuery("CALL GetUserByUserName(:username)")                    .addEntity(User.class)                    .setParameter("username", username);            user = (User) query.list().get(0);        } catch (Exception e){            if(transaction != null)                transaction.commit();            System.err.println(e.getMessage());        } finally {            session.close();        }        return user;    }    @Override    public User findUserByUsernamePassword(String username, String password) {        return null;    }    @Override    public User getUserById(Long id) {        Session session = null;        Transaction transaction = null;        User user = null;        try{            session = sessionFactory.openSession();            transaction = session.beginTransaction();            Query query = session.createSQLQuery("CALL GetUserById(:id)")                    .setResultTransformer(Transformers.aliasToBean(User.class))                    .setParameter("id", id);            user = (User) query.list().get(0);        } catch (Exception e){            if(transaction != null)                transaction.commit();            System.err.println(e.getMessage());        } finally {            session.close();        }        return user;    }    @Override    public void updateUser(User user) {        Session session = null;        Transaction transaction = null;        try {            session = sessionFactory.openSession();            transaction = session.beginTransaction();            Query query = session.createSQLQuery("CALL UpdateUser(:id, :email, :password, :activationCode)")                    .setParameter("id", user.getId())                    .setParameter("email", user.getUsername())                    .setParameter("password", user.getPassword())                    .setParameter("activationCode", user.getActivationCode());            query.executeUpdate();        } catch (Exception e){            if(transaction != null)                transaction.commit();            System.err.println(e.getMessage());        } finally {            session.close();        }    }    @Override    public List<User> getAll() {        Session session = null;        Transaction transaction = null;        List<User> users = null;        try{            session = sessionFactory.openSession();            transaction = session.beginTransaction();            Query query = session.createSQLQuery("CALL GetAllUsers()")                    .addEntity(User.class);            users = query.list();        } catch (Exception e){            if(transaction != null)                transaction.commit();            System.err.println(e.getMessage());        } finally {            session.close();        }        return users;    }    @Override    public void activateUser(User user) {        Session session = null;        Transaction transaction = null;        try{            session = sessionFactory.openSession();            transaction = session.beginTransaction();            Query query = session.createSQLQuery("CALL ActivateUser(:id)")                    .setParameter("id", user.getId());            query.executeUpdate();        } catch (Exception e){            if(transaction != null)                transaction.commit();            System.err.println(e.getMessage());        } finally {            session.close();        }    }    @Override    public User getUserByActivationCode(String code) {        Session session = null;        Transaction transaction = null;        User user = null;        try{            session = sessionFactory.openSession();            transaction = session.beginTransaction();            Query query = session.createSQLQuery("CALL GetUserByActivationCode(:code)")                    .addEntity(User.class)                    .setParameter("code", code);            user = (User) query.list().get(0);        } catch (Exception e){            if(transaction != null)                transaction.commit();            System.err.println(e.getMessage());        } finally {            session.close();        }        return user;    }    @Override    public List<User> getSimilarUsersByUsername(String username){        Session session = null;        Transaction transaction = null;        List<User> users = null;        try {            session = sessionFactory.openSession();            transaction = session.beginTransaction();            Query query = session.createSQLQuery("CALL GetAllSimilarUsersByUsername(:username)")                    .setResultTransformer(Transformers.aliasToBean(User.class))                    .setParameter("username", username);            users = query.list();            for (User user:users) {                user.setCountSubscribers(getCountSubscribers(user.getId()));                user.setCountMessages(getCountMessages(user.getId()));                user.setCountSubscriptions(getCountSubscriptions(user.getId()));            }        } catch (Exception e){            if(transaction != null)                transaction.commit();            System.err.println(e.getMessage());        } finally {            session.close();        }        return users;    }    @Override    public List<User> getSubscribersByUserId(Long id){        Session session = null;        Transaction transaction = null;        List<User> users = null;        try {            session = sessionFactory.openSession();            transaction = session.beginTransaction();            Query query = session.createSQLQuery("CALL GetSubscribersByUserId(:id)")                    .setResultTransformer(Transformers.aliasToBean(User.class))                    .setParameter("id", id);            users = query.list();        } catch (Exception e){            if(transaction != null)                transaction.commit();            System.err.println(e.getMessage());        } finally {            session.close();        }        return users;    }    @Override    public Set<User> getSubscriptionsByUserId(Long id){        Session session = null;        Transaction transaction = null;        Set<User> users = new HashSet<>();        try {            session = sessionFactory.openSession();            transaction = session.beginTransaction();            Query query = session.createSQLQuery("CALL GetSubscriptionsByUserId(:id)")                    .setResultTransformer(Transformers.aliasToBean(User.class))                    .setParameter("id", id);            users.addAll(query.list());        } catch (Exception e){            if(transaction != null)                transaction.commit();            System.err.println(e.getMessage());        } finally {            session.close();        }        return users;    }    @Override    public Set<Role> getRolesByUserId(Long id) {        Session session = null;        Transaction transaction = null;        Set<Role> roles = new HashSet<>();        try {            session = sessionFactory.openSession();            transaction = session.beginTransaction();            Query query = session.createSQLQuery("CALL GetRolesByUserId(:id)")                    .setResultTransformer(Transformers.aliasToBean(Role.class))                    .setParameter("id", id);            for (Object role : query.list()) {                System.out.println((String) role);                roles.add(Role.valueOf((String) role));            }        } catch (Exception e){            if(transaction != null)                transaction.commit();            System.err.println(e.getMessage());        } finally {            session.close();        }        return roles;    }    @Override    public int getCountSubscribers(Long id) {        Session session = null;        Transaction transaction = null;        int count = -1;        try{            session = sessionFactory.openSession();            transaction = session.beginTransaction();            Query query = session.createSQLQuery("CALL GetCountSubscribers(:id)")                    .setParameter("id", id);            count = ((BigInteger) query.list().get(0)).intValue();        } catch (Exception e){            if(transaction != null)                transaction.commit();            System.err.println(e.getMessage());        } finally {            session.close();        }        return count;    }    @Override    public int getCountSubscriptions(Long id) {        Session session = null;        Transaction transaction = null;        int count = -1;        try{            session = sessionFactory.openSession();            transaction = session.beginTransaction();            Query query = session.createSQLQuery("CALL GetCountSubscriptions(:id)")                    .setParameter("id", id);            count = ((BigInteger) query.list().get(0)).intValue();        } catch (Exception e){            if(transaction != null)                transaction.commit();            System.err.println(e.getMessage());        } finally {            session.close();        }        return count;    }    @Override    public int getCountMessages(Long id) {        Session session = null;        Transaction transaction = null;        int count = -1;        try{            session = sessionFactory.openSession();            transaction = session.beginTransaction();            Query query = session.createSQLQuery("CALL GetCountOfMessage(:id)")                    .setParameter("id", id);            count = ((BigInteger) query.list().get(0)).intValue();        } catch (Exception e) {            if(transaction != null)                transaction.commit();            System.err.println(e.getMessage());        } finally {            session.close();        }        return count;    }}