package com.example.app.domain;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import javax.persistence.*;import javax.validation.constraints.Email;import javax.validation.constraints.NotBlank;import java.io.Serializable;import java.math.BigInteger;import java.util.*;@Entity@Table(name = "user")public class User implements UserDetails, Serializable {    @Transient    private static final long serialVersionUID = 1490373494801740475L;    @Transient    private int countSubscribers;    @Transient    private int countSubscriptions;    @Transient    private int countMessages;    @Id    @GeneratedValue(strategy = GenerationType.AUTO)    private long id;    @NotBlank(message = "Username cannot be empty")    private String username;    @NotBlank(message = "Password cannot be empty")    private String password;    private boolean active;    @Email(message = "Email is not correct")    @NotBlank(message = "Email cannot be empty")    private String email;    @Column(name = "activation_code")    private String activationCode;    @OneToMany(mappedBy = "author", cascade = CascadeType.ALL, fetch = FetchType.LAZY)    private Set<Message> messages;    @ManyToMany    @JoinTable(            name = "user_subscriptions",            joinColumns = {@JoinColumn(name = "channel_id")},            inverseJoinColumns = {@JoinColumn(name = "subscriber_id")}    )    private Set<User> subscribers = new HashSet<>();    @ManyToMany    @JoinTable(            name = "user_subscriptions",            joinColumns = {@JoinColumn(name = "subscriber_id")},            inverseJoinColumns = {@JoinColumn(name = "channel_id")}    )    private Set<User> subscriptions = new HashSet<>();    @ElementCollection(targetClass = Role.class, fetch = FetchType.EAGER)    @CollectionTable(name = "user_role", joinColumns = @JoinColumn(name = "user_id"))    @Enumerated(EnumType.STRING)    private Set<Role> roles;    public User() {    }    public User(Long id, String username, String password, boolean active, String email, String activationCode, Set<Message> messages, Set<User> subscribers, Set<User> subscriptions) {    }    public String getEmail() {        return email;    }    public void setEmail(String email) {        this.email = email;    }    public String getActivationCode() {        return activationCode;    }    public void setActivationCode(String activationCode) {        this.activationCode = activationCode;    }    public boolean isAdmin() {        return roles.contains(Role.ADMIN);    }    public long getId() {        return id;    }    public void setId(BigInteger id) {        this.id = Long.valueOf(String.valueOf(id));    }    public String getUsername() {        return username;    }    @Override    public boolean isAccountNonExpired() {        return true;    }    @Override    public boolean isAccountNonLocked() {        return true;    }    @Override    public boolean isCredentialsNonExpired() {        return true;    }    @Override    public boolean isEnabled() {        return isActive();    }    public void setUsername(String username) {        this.username = username;    }    @Override    public Collection<? extends GrantedAuthority> getAuthorities() {        return getRoles();    }    public String getPassword() {        return password;    }    public void setPassword(String password) {        this.password = password;    }    public boolean isActive() {        return active;    }    public void setActive(boolean active) {        this.active = active;    }    public Set<Role> getRoles() {        return roles;    }    //public void setRoles(Set<Role> roles) { this.roles = roles; }    public void setRoles(String roles) {    }    public Set<Message> getMessages() {        return messages;    }    public void setMessages(Set<Message> messages) {        this.messages = messages;    }    public Set<User> getSubscribers() {        return subscribers;    }    public void setSubscribers(Set<User> subscribers) {        this.subscribers = subscribers;    }    public Set<User> getSubscriptions() {        return subscriptions;    }    public void setSubscriptions(Set<User> subscriptions) {        this.subscriptions = subscriptions;    }    public int getCountSubscribers() {        return countSubscribers;    }    public void setCountSubscribers(int countSubscribers) {        this.countSubscribers = countSubscribers;    }    public int getCountSubscriptions() {        return countSubscriptions;    }    public void setCountSubscriptions(int countSubscriptions) {        this.countSubscriptions = countSubscriptions;    }    public int getCountMessages() {        return countMessages;    }    public void setCountMessages(int countMessages) {        this.countMessages = countMessages;    }    @Override    public boolean equals(Object o) {        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        User user = (User) o;        return id == user.id;    }    @Override    public int hashCode() {        return Objects.hash(id);    }    public void setSubscribers(List<User> subscribersByUserId) {        subscribers.addAll(subscribersByUserId);    }    public void setSubscriptions(List<User> subscriptionsByUserId) {        subscriptions.addAll(subscriptionsByUserId);    }}