package com.example.app.config;import com.example.app.service.UserService;import com.google.common.hash.Hashing;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.crypto.bcrypt.BCrypt;import org.springframework.security.crypto.password.PasswordEncoder;import java.nio.charset.StandardCharsets;@Configuration@EnableWebSecurity@EnableGlobalMethodSecurity(prePostEnabled = true)public class WebSecurityConfig extends WebSecurityConfigurerAdapter {    @Autowired    private UserService userService;    @Autowired    private PasswordEncoder passwordEncoder;    @Bean    public PasswordEncoder getPasswordEncoder(){        return new PasswordEncoder() {            @Override            public String encode(CharSequence charSequence) {                String hashPassword = Hashing.sha256()                        .hashString(charSequence, StandardCharsets.UTF_8)                        .toString();                return hashPassword;            }            @Override            public boolean matches(CharSequence charSequence, String encodedPassword) {                return encode(charSequence).equals(encodedPassword);            }        };    }    @Override    protected void configure(HttpSecurity http) throws Exception {        http                .authorizeRequests()                    .antMatchers("/","/registration","/static/**","/error**", "/activate/*").permitAll()                    .anyRequest().authenticated()                .and()                    .formLogin()                    .loginPage("/login")                    .permitAll()                .and()                    .rememberMe()                .and()                    .logout()                    .permitAll();    }    @Override    public void configure(AuthenticationManagerBuilder auth) throws Exception {        auth.userDetailsService(userService)                .passwordEncoder(passwordEncoder);   }}